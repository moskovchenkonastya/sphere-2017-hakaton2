// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ecxhange-broker.proto

/*
Package exchange_broker_proto is a generated protocol buffer package.

It is generated from these files:
	ecxhange-broker.proto

It has these top-level messages:
	OHLCV
	Deal
	Nothing
*/
package exchange_broker_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OHLCV struct {
	ID       int64   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Time     int32   `protobuf:"varint,2,opt,name=Time" json:"Time,omitempty"`
	Interval int32   `protobuf:"varint,3,opt,name=Interval" json:"Interval,omitempty"`
	Open     float32 `protobuf:"fixed32,4,opt,name=Open" json:"Open,omitempty"`
	High     float32 `protobuf:"fixed32,5,opt,name=High" json:"High,omitempty"`
	Low      float32 `protobuf:"fixed32,6,opt,name=Low" json:"Low,omitempty"`
	Close    float32 `protobuf:"fixed32,7,opt,name=Close" json:"Close,omitempty"`
	Volume   int32   `protobuf:"varint,8,opt,name=Volume" json:"Volume,omitempty"`
	Ticker   string  `protobuf:"bytes,9,opt,name=Ticker" json:"Ticker,omitempty"`
}

func (m *OHLCV) Reset()                    { *m = OHLCV{} }
func (m *OHLCV) String() string            { return proto.CompactTextString(m) }
func (*OHLCV) ProtoMessage()               {}
func (*OHLCV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OHLCV) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *OHLCV) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *OHLCV) GetInterval() int32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *OHLCV) GetOpen() float32 {
	if m != nil {
		return m.Open
	}
	return 0
}

func (m *OHLCV) GetHigh() float32 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *OHLCV) GetLow() float32 {
	if m != nil {
		return m.Low
	}
	return 0
}

func (m *OHLCV) GetClose() float32 {
	if m != nil {
		return m.Close
	}
	return 0
}

func (m *OHLCV) GetVolume() int32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *OHLCV) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

type Deal struct {
	BrokerID int32   `protobuf:"varint,1,opt,name=BrokerID" json:"BrokerID,omitempty"`
	ClientID int32   `protobuf:"varint,2,opt,name=ClientID" json:"ClientID,omitempty"`
	Ticker   string  `protobuf:"bytes,3,opt,name=Ticker" json:"Ticker,omitempty"`
	Amount   int32   `protobuf:"varint,4,opt,name=Amount" json:"Amount,omitempty"`
	Partial  bool    `protobuf:"varint,5,opt,name=Partial" json:"Partial,omitempty"`
	Time     int32   `protobuf:"varint,6,opt,name=Time" json:"Time,omitempty"`
	Price    float32 `protobuf:"fixed32,7,opt,name=Price" json:"Price,omitempty"`
}

func (m *Deal) Reset()                    { *m = Deal{} }
func (m *Deal) String() string            { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()               {}
func (*Deal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Deal) GetBrokerID() int32 {
	if m != nil {
		return m.BrokerID
	}
	return 0
}

func (m *Deal) GetClientID() int32 {
	if m != nil {
		return m.ClientID
	}
	return 0
}

func (m *Deal) GetTicker() string {
	if m != nil {
		return m.Ticker
	}
	return ""
}

func (m *Deal) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Deal) GetPartial() bool {
	if m != nil {
		return m.Partial
	}
	return false
}

func (m *Deal) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Deal) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Nothing struct {
	Dummy bool `protobuf:"varint,1,opt,name=dummy" json:"dummy,omitempty"`
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Nothing) GetDummy() bool {
	if m != nil {
		return m.Dummy
	}
	return false
}

func init() {
	proto.RegisterType((*OHLCV)(nil), "exchange_broker_proto.OHLCV")
	proto.RegisterType((*Deal)(nil), "exchange_broker_proto.Deal")
	proto.RegisterType((*Nothing)(nil), "exchange_broker_proto.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ExchangeBroker service

type ExchangeBrokerClient interface {
	OHLCVstream(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (ExchangeBroker_OHLCVstreamClient, error)
	GetDeal(ctx context.Context, opts ...grpc.CallOption) (ExchangeBroker_GetDealClient, error)
}

type exchangeBrokerClient struct {
	cc *grpc.ClientConn
}

func NewExchangeBrokerClient(cc *grpc.ClientConn) ExchangeBrokerClient {
	return &exchangeBrokerClient{cc}
}

func (c *exchangeBrokerClient) OHLCVstream(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (ExchangeBroker_OHLCVstreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExchangeBroker_serviceDesc.Streams[0], c.cc, "/exchange_broker_proto.ExchangeBroker/OHLCVstream", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeBrokerOHLCVstreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExchangeBroker_OHLCVstreamClient interface {
	Recv() (*OHLCV, error)
	grpc.ClientStream
}

type exchangeBrokerOHLCVstreamClient struct {
	grpc.ClientStream
}

func (x *exchangeBrokerOHLCVstreamClient) Recv() (*OHLCV, error) {
	m := new(OHLCV)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeBrokerClient) GetDeal(ctx context.Context, opts ...grpc.CallOption) (ExchangeBroker_GetDealClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ExchangeBroker_serviceDesc.Streams[1], c.cc, "/exchange_broker_proto.ExchangeBroker/GetDeal", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeBrokerGetDealClient{stream}
	return x, nil
}

type ExchangeBroker_GetDealClient interface {
	Send(*Deal) error
	Recv() (*Deal, error)
	grpc.ClientStream
}

type exchangeBrokerGetDealClient struct {
	grpc.ClientStream
}

func (x *exchangeBrokerGetDealClient) Send(m *Deal) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exchangeBrokerGetDealClient) Recv() (*Deal, error) {
	m := new(Deal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExchangeBroker service

type ExchangeBrokerServer interface {
	OHLCVstream(*Nothing, ExchangeBroker_OHLCVstreamServer) error
	GetDeal(ExchangeBroker_GetDealServer) error
}

func RegisterExchangeBrokerServer(s *grpc.Server, srv ExchangeBrokerServer) {
	s.RegisterService(&_ExchangeBroker_serviceDesc, srv)
}

func _ExchangeBroker_OHLCVstream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeBrokerServer).OHLCVstream(m, &exchangeBrokerOHLCVstreamServer{stream})
}

type ExchangeBroker_OHLCVstreamServer interface {
	Send(*OHLCV) error
	grpc.ServerStream
}

type exchangeBrokerOHLCVstreamServer struct {
	grpc.ServerStream
}

func (x *exchangeBrokerOHLCVstreamServer) Send(m *OHLCV) error {
	return x.ServerStream.SendMsg(m)
}

func _ExchangeBroker_GetDeal_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangeBrokerServer).GetDeal(&exchangeBrokerGetDealServer{stream})
}

type ExchangeBroker_GetDealServer interface {
	Send(*Deal) error
	Recv() (*Deal, error)
	grpc.ServerStream
}

type exchangeBrokerGetDealServer struct {
	grpc.ServerStream
}

func (x *exchangeBrokerGetDealServer) Send(m *Deal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exchangeBrokerGetDealServer) Recv() (*Deal, error) {
	m := new(Deal)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ExchangeBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exchange_broker_proto.ExchangeBroker",
	HandlerType: (*ExchangeBrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OHLCVstream",
			Handler:       _ExchangeBroker_OHLCVstream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDeal",
			Handler:       _ExchangeBroker_GetDeal_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ecxhange-broker.proto",
}

func init() { proto.RegisterFile("ecxhange-broker.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0x87, 0xd9, 0x96, 0xfe, 0x61, 0x4d, 0x88, 0xd9, 0x80, 0xd9, 0xa0, 0xd1, 0xa6, 0xa7, 0x5e,
	0x24, 0x44, 0x9f, 0x40, 0xa9, 0x91, 0x26, 0x44, 0xc8, 0x86, 0x70, 0x25, 0xa5, 0x6e, 0xa0, 0xa1,
	0xed, 0x92, 0x65, 0x51, 0x7c, 0x27, 0x4f, 0xbe, 0x84, 0xaf, 0x65, 0x76, 0x5a, 0x1b, 0x0e, 0xe2,
	0x6d, 0xbe, 0x6f, 0x36, 0xd3, 0xfe, 0x66, 0x70, 0x97, 0x27, 0x87, 0x75, 0x5c, 0xac, 0xf8, 0xed,
	0x52, 0x8a, 0x0d, 0x97, 0xfd, 0xad, 0x14, 0x4a, 0x90, 0x2e, 0x3f, 0x24, 0xa0, 0x17, 0xa5, 0x5e,
	0x80, 0xf6, 0xbf, 0x11, 0xb6, 0x26, 0xa3, 0xf1, 0x70, 0x4e, 0xda, 0xd8, 0x88, 0x42, 0x8a, 0x3c,
	0x14, 0x98, 0xcc, 0x88, 0x42, 0x42, 0x70, 0x73, 0x96, 0xe6, 0x9c, 0x1a, 0x1e, 0x0a, 0x2c, 0x06,
	0x35, 0xe9, 0x61, 0x37, 0x2a, 0x14, 0x97, 0x6f, 0x71, 0x46, 0x4d, 0xf0, 0x35, 0xeb, 0xf7, 0x93,
	0x2d, 0x2f, 0x68, 0xd3, 0x43, 0x81, 0xc1, 0xa0, 0xd6, 0x6e, 0x94, 0xae, 0xd6, 0xd4, 0x2a, 0x9d,
	0xae, 0xc9, 0x39, 0x36, 0xc7, 0xe2, 0x9d, 0xda, 0xa0, 0x74, 0x49, 0x3a, 0xd8, 0x1a, 0x66, 0x62,
	0xc7, 0xa9, 0x03, 0xae, 0x04, 0x72, 0x81, 0xed, 0xb9, 0xc8, 0xf6, 0x39, 0xa7, 0x2e, 0x7c, 0xa9,
	0x22, 0xed, 0x67, 0x69, 0xb2, 0xe1, 0x92, 0xb6, 0x3c, 0x14, 0xb4, 0x58, 0x45, 0xfe, 0x17, 0xc2,
	0xcd, 0x90, 0xc7, 0x99, 0xfe, 0xc9, 0x47, 0x88, 0x58, 0xc5, 0xb1, 0x58, 0xcd, 0xba, 0x37, 0xcc,
	0x52, 0x5e, 0xa8, 0x28, 0xac, 0x82, 0xd5, 0x7c, 0x34, 0xd8, 0x3c, 0x1e, 0xac, 0xfd, 0x43, 0x2e,
	0xf6, 0x85, 0x82, 0x68, 0x16, 0xab, 0x88, 0x50, 0xec, 0x4c, 0x63, 0xa9, 0xd2, 0x38, 0x83, 0x7c,
	0x2e, 0xfb, 0xc5, 0x7a, 0x75, 0xf6, 0xd1, 0xea, 0x3a, 0xd8, 0x9a, 0xca, 0x34, 0xa9, 0x43, 0x02,
	0xf8, 0x37, 0xd8, 0x79, 0x11, 0x6a, 0x9d, 0x16, 0x2b, 0xfd, 0xe0, 0x75, 0x9f, 0xe7, 0x1f, 0xf0,
	0xcf, 0x2e, 0x2b, 0xe1, 0xee, 0x13, 0xe1, 0xf6, 0x53, 0x75, 0xb9, 0x32, 0x05, 0x99, 0xe0, 0x33,
	0xb8, 0xd8, 0x4e, 0x49, 0x1e, 0xe7, 0xe4, 0xba, 0xff, 0xe7, 0x65, 0xfb, 0xd5, 0xdc, 0xde, 0xd5,
	0x89, 0x3e, 0xcc, 0xf0, 0x1b, 0x03, 0x44, 0x22, 0xec, 0x3c, 0x73, 0x05, 0xbb, 0xbb, 0x3c, 0xf1,
	0x58, 0x37, 0x7b, 0xff, 0x35, 0xfd, 0x46, 0x80, 0x06, 0x68, 0x69, 0x83, 0xb9, 0xff, 0x09, 0x00,
	0x00, 0xff, 0xff, 0xf9, 0x17, 0x61, 0x4e, 0x85, 0x02, 0x00, 0x00,
}
